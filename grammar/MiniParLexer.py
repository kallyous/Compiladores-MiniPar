# Generated from MiniPar.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,178,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,0,1,0,1,0,1,1,1,
        1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
        8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,
        14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,
        19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,
        22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,4,24,134,8,24,11,
        24,12,24,135,1,24,1,24,1,25,4,25,141,8,25,11,25,12,25,142,1,25,1,
        25,1,26,1,26,5,26,149,8,26,10,26,12,26,152,9,26,1,27,4,27,155,8,
        27,11,27,12,27,156,1,28,4,28,160,8,28,11,28,12,28,161,1,28,1,28,
        4,28,166,8,28,11,28,12,28,167,1,29,1,29,5,29,172,8,29,10,29,12,29,
        175,9,29,1,29,1,29,0,0,30,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,1,
        0,7,2,0,10,10,13,13,2,0,9,9,32,32,2,0,65,90,97,122,3,0,48,57,65,
        90,97,122,1,0,48,57,4,0,46,46,48,57,65,90,97,122,3,0,10,10,13,13,
        34,34,184,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,1,61,1,0,0,0,3,66,1,0,0,0,5,68,1,0,0,0,7,70,1,0,0,0,9,72,1,
        0,0,0,11,74,1,0,0,0,13,78,1,0,0,0,15,80,1,0,0,0,17,82,1,0,0,0,19,
        86,1,0,0,0,21,88,1,0,0,0,23,90,1,0,0,0,25,92,1,0,0,0,27,94,1,0,0,
        0,29,96,1,0,0,0,31,98,1,0,0,0,33,100,1,0,0,0,35,103,1,0,0,0,37,106,
        1,0,0,0,39,109,1,0,0,0,41,112,1,0,0,0,43,115,1,0,0,0,45,120,1,0,
        0,0,47,126,1,0,0,0,49,133,1,0,0,0,51,140,1,0,0,0,53,146,1,0,0,0,
        55,154,1,0,0,0,57,159,1,0,0,0,59,169,1,0,0,0,61,62,5,99,0,0,62,63,
        5,104,0,0,63,64,5,97,0,0,64,65,5,110,0,0,65,2,1,0,0,0,66,67,5,40,
        0,0,67,4,1,0,0,0,68,69,5,44,0,0,69,6,1,0,0,0,70,71,5,41,0,0,71,8,
        1,0,0,0,72,73,5,59,0,0,73,10,1,0,0,0,74,75,5,115,0,0,75,76,5,101,
        0,0,76,77,5,113,0,0,77,12,1,0,0,0,78,79,5,123,0,0,79,14,1,0,0,0,
        80,81,5,125,0,0,81,16,1,0,0,0,82,83,5,112,0,0,83,84,5,97,0,0,84,
        85,5,114,0,0,85,18,1,0,0,0,86,87,5,61,0,0,87,20,1,0,0,0,88,89,5,
        43,0,0,89,22,1,0,0,0,90,91,5,45,0,0,91,24,1,0,0,0,92,93,5,42,0,0,
        93,26,1,0,0,0,94,95,5,47,0,0,95,28,1,0,0,0,96,97,5,60,0,0,97,30,
        1,0,0,0,98,99,5,62,0,0,99,32,1,0,0,0,100,101,5,60,0,0,101,102,5,
        61,0,0,102,34,1,0,0,0,103,104,5,62,0,0,104,105,5,61,0,0,105,36,1,
        0,0,0,106,107,5,61,0,0,107,108,5,61,0,0,108,38,1,0,0,0,109,110,5,
        33,0,0,110,111,5,61,0,0,111,40,1,0,0,0,112,113,5,105,0,0,113,114,
        5,102,0,0,114,42,1,0,0,0,115,116,5,101,0,0,116,117,5,108,0,0,117,
        118,5,115,0,0,118,119,5,101,0,0,119,44,1,0,0,0,120,121,5,119,0,0,
        121,122,5,104,0,0,122,123,5,105,0,0,123,124,5,108,0,0,124,125,5,
        101,0,0,125,46,1,0,0,0,126,127,5,112,0,0,127,128,5,114,0,0,128,129,
        5,105,0,0,129,130,5,110,0,0,130,131,5,116,0,0,131,48,1,0,0,0,132,
        134,7,0,0,0,133,132,1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,
        136,1,0,0,0,136,137,1,0,0,0,137,138,6,24,0,0,138,50,1,0,0,0,139,
        141,7,1,0,0,140,139,1,0,0,0,141,142,1,0,0,0,142,140,1,0,0,0,142,
        143,1,0,0,0,143,144,1,0,0,0,144,145,6,25,0,0,145,52,1,0,0,0,146,
        150,7,2,0,0,147,149,7,3,0,0,148,147,1,0,0,0,149,152,1,0,0,0,150,
        148,1,0,0,0,150,151,1,0,0,0,151,54,1,0,0,0,152,150,1,0,0,0,153,155,
        7,4,0,0,154,153,1,0,0,0,155,156,1,0,0,0,156,154,1,0,0,0,156,157,
        1,0,0,0,157,56,1,0,0,0,158,160,7,5,0,0,159,158,1,0,0,0,160,161,1,
        0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,163,1,0,0,0,163,165,5,
        58,0,0,164,166,7,4,0,0,165,164,1,0,0,0,166,167,1,0,0,0,167,165,1,
        0,0,0,167,168,1,0,0,0,168,58,1,0,0,0,169,173,5,34,0,0,170,172,8,
        6,0,0,171,170,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,
        0,0,0,174,176,1,0,0,0,175,173,1,0,0,0,176,177,5,34,0,0,177,60,1,
        0,0,0,8,0,135,142,150,156,161,167,173,1,6,0,0
    ]

class MiniParLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    IF = 21
    ELSE = 22
    WHILE = 23
    PRINT = 24
    NEWLINE = 25
    WHITESPACE = 26
    ID = 27
    INT = 28
    ADDR = 29
    STRING = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'chan'", "'('", "','", "')'", "';'", "'seq'", "'{'", "'}'", 
            "'par'", "'='", "'+'", "'-'", "'*'", "'/'", "'<'", "'>'", "'<='", 
            "'>='", "'=='", "'!='", "'if'", "'else'", "'while'", "'print'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "WHILE", "PRINT", "NEWLINE", "WHITESPACE", "ID", 
            "INT", "ADDR", "STRING" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "IF", "ELSE", "WHILE", "PRINT", "NEWLINE", "WHITESPACE", 
                  "ID", "INT", "ADDR", "STRING" ]

    grammarFileName = "MiniPar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


